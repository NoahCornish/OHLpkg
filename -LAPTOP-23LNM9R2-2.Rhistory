Rookie = "rookie",
JN = "jersey_number",
BD = "birthdate",
BD_Y = "birthdate_year",
Hgt = "height",
Wgt = "weight",
Pos = "position",
Team = "team_name",
GP = "games_played",
G = "goals",
A = "assists",
PTS = "points",
`Pts/G` = "points_per_game",
`+/-` = "plus_minus",
PPG = "power_play_goals",
PPA = "power_play_assists",
PPP = "power_play_points",
SHG = "short_handed_goals",
SHA = "short_handed_assists",
SHPTS = "short_handed_points",
GWG = "game_winning_goals",
ENG = "empty_net_goals",
PIM = "penalty_minutes",
Active = "active") %>%
filter(Active == 1) %>%
#filter(GP > 9) %>%
mutate(PPP = PPG + PPA) %>%
filter(Pos != "G")
#assign rookie values as YES or No instead of binary (1, 0)
LeagueStats$Rookie <- gsub('1', 'YES', LeagueStats$Rookie)
LeagueStats$Rookie <- gsub('0', 'NO', LeagueStats$Rookie)
#fix and adjust the BD column
LeagueStats$BD <- gsub(",", "", LeagueStats$BD)
LeagueStats$BD <- as.POSIXct(LeagueStats$BD, format='%B %d %Y')
LeagueStats$BD <- as.Date(LeagueStats$BD, format = "%d-%b-%Y")
return(LeagueStats)
}
x <- get_Stats()
# create data frame
df_goalies <- json_data_goalies[["SiteKit"]][["Statviewtype"]]
goalie_stats <- df_goalies %>%
select(name, height, weight, team_name, birthdate,
games_played, saves, shots, save_percentage,
shots_against_average, goals_against, goals_against_average,
shutouts, wins, losses, ot_losses, total_losses,
shootout_games_played, shootout_wins, shootout_losses,
penalty_minutes)
View(goalie_stats)
goalie_stats <- df_goalies %>%
select(name, height, weight, team_name, birthdate,
games_played, saves, shots, save_percentage,
shots_against_average, goals_against, goals_against_average,
shutouts, wins, losses, ot_losses, total_losses,
shootout_games_played, shootout_wins, shootout_losses,
penalty_minutes) %>%
filter(games_played > 9)
url_goalies <- "https://lscluster.hockeytech.com/feed/?feed=modulekit&view=statviewtype&type=topgoalies&key=2976319eb44abe94&fmt=json&client_code=ohl&lang=en&league_code=&season_id=76&first=0&limit=50000&sort=active&stat=all&order_direction="
# use jsonlite::fromJSON to handle NULL values
json_data_goalies <- jsonlite::fromJSON(url_goalies, simplifyDataFrame = TRUE)
# create data frame
df_goalies <- json_data_goalies[["SiteKit"]][["Statviewtype"]]
goalie_stats <- df_goalies %>%
select(name, height, weight, team_name, birthdate,
games_played, saves, shots, save_percentage,
shots_against_average, goals_against, goals_against_average,
shutouts, wins, losses, ot_losses, total_losses,
shootout_games_played, shootout_wins, shootout_losses,
penalty_minutes)
goalie_stats <- df_goalies %>%
select(name, height, weight, team_name, birthdate,
games_played, saves, shots, save_percentage,
shots_against_average, goals_against, goals_against_average,
shutouts, wins, losses, ot_losses, total_losses,
shootout_games_played, shootout_wins, shootout_losses,
penalty_minutes) %>%
filter(games_played > 9)
# create data frame
df_goalies <- json_data_goalies[["SiteKit"]][["Statviewtype"]]
goalie_stats <- df_goalies %>%
select(name, height, weight, team_name, birthdate,
games_played, saves, shots, save_percentage,
shots_against_average, goals_against, goals_against_average,
shutouts, wins, losses, ot_losses, total_losses,
shootout_games_played, shootout_wins, shootout_losses,
penalty_minutes)
View(goalie_stats)
goalie_stats <- df_goalies %>%
select(name, height, weight, team_name, birthdate,
games_played, saves, shots, save_percentage,
shots_against_average, goals_against, goals_against_average,
shutouts, wins, losses, ot_losses, total_losses,
shootout_games_played, shootout_wins, shootout_losses,
penalty_minutes) %>%
rename(name = "Name")
# create data frame
df_goalies <- json_data_goalies[["SiteKit"]][["Statviewtype"]]
goalie_stats <- df_goalies %>%
select(name, height, weight, team_name, birthdate,
games_played, saves, shots, save_percentage,
shots_against_average, goals_against, goals_against_average,
shutouts, wins, losses, ot_losses, total_losses,
shootout_games_played, shootout_wins, shootout_losses,
penalty_minutes) %>%
rename(Name = "name")
View(goalie_stats)
df_goalies <- json_data_goalies[["SiteKit"]][["Statviewtype"]]
goalie_stats <- df_goalies %>%
select(name, height, weight, team_name, birthdate,
games_played, saves, shots, save_percentage,
shots_against_average, goals_against, goals_against_average,
shutouts, wins, losses, ot_losses, total_losses,
shootout_games_played, shootout_wins, shootout_losses,
penalty_minutes) %>%
rename(Name = "name",
Height = "height",
Weight = "weight",
Team = "team_name",
Birthdate = "birthdate",
GP = "games_played",
SAV = "saves",
SH = "shots",
`SAV%` = "save_percentage",
`SH%` = "shots_against_average",
GA = "goals_against",
GAA = "goals_against_average",
SO = "shutouts",
W = "wins",
L = "losses",
OTL = "ot_losses",
TL = "total_losses",
SOGP = "shootout_games_played",
SOW = "shootout_wins",
SOL = "shootout_losses",
PIM = "penalty_minutes")
goalie_stats <- df_goalies %>%
select(name, height, weight, team_name, birthdate,
games_played, saves, shots, save_percentage,
shots_against_average, goals_against, goals_against_average,
shutouts, wins, losses, ot_losses, total_losses,
shootout_games_played, shootout_wins, shootout_losses,
penalty_minutes) %>%
rename(Name = "name",
Height = "height",
Weight = "weight",
Team = "team_name",
Birthdate = "birthdate",
GP = "games_played",
SAV = "saves",
SH = "shots",
`SAV%` = "save_percentage",
`SH%` = "shots_against_average",
GA = "goals_against",
GAA = "goals_against_average",
SO = "shutouts",
W = "wins",
L = "losses",
OTL = "ot_losses",
TL = "total_losses",
SOGP = "shootout_games_played",
SOW = "shootout_wins",
SOL = "shootout_losses",
PIM = "penalty_minutes") %>%
filter(GP > 9)
goalie_stats <- df_goalies %>%
select(name, height, weight, team_name, birthdate,
games_played, saves, shots, save_percentage,
shots_against_average, goals_against, goals_against_average,
shutouts, wins, losses, ot_losses, total_losses,
shootout_games_played, shootout_wins, shootout_losses,
penalty_minutes) %>%
rename(Name = "name",
Height = "height",
Weight = "weight",
Team = "team_name",
Birthdate = "birthdate",
GP = "games_played",
SAV = "saves",
SH = "shots",
`SAV%` = "save_percentage",
`SH%` = "shots_against_average",
GA = "goals_against",
GAA = "goals_against_average",
SO = "shutouts",
W = "wins",
L = "losses",
OTL = "ot_losses",
TL = "total_losses",
SOGP = "shootout_games_played",
SOW = "shootout_wins",
SOL = "shootout_losses",
PIM = "penalty_minutes")
glimpse(OHLTeams)
glimpse(get_Teams)
library(rsconnect)
library(ggplot2)
library(tidyverse)
library(janitor)
library(lubridate)
library(RJSONIO)
library(jsonlite)
library(dplyr)
library(scales)
url_reg <- "https://lscluster.hockeytech.com/feed/?feed=modulekit&view=statviewtype&type=topscorers&key=2976319eb44abe94&fmt=json&client_code=ohl&lang=en&league_code=&season_id=76&first=0&limit=50000&sort=active&stat=all&order_direction="
# use jsonlite::fromJSON to handle NULL values
json_data <- jsonlite::fromJSON(url_reg, simplifyDataFrame = TRUE)
# create data frame
df <- json_data[["SiteKit"]][["Statviewtype"]] %>%
select(rank, player_id:num_teams) %>%
select(-c(birthtown, birthprov, birthcntry,
loose_ball_recoveries, caused_turnovers, turnovers,
phonetic_name, last_years_club, suspension_games_remaining,
suspension_indefinite)) %>%
mutate(player_id = as.numeric(player_id)) %>%
mutate(across(active:age, ~as.numeric(.))) %>%
mutate(across(rookie:jersey_number, ~as.numeric(.))) %>%
mutate(team_id = as.numeric(team_id)) %>%
mutate(across(games_played:faceoff_pct, ~as.numeric(.))) %>%
mutate(across(shots_on:num_teams, ~as.numeric(.))) %>%
mutate(birthdate_year = stringr::str_split(birthdate_year,
"\\'", simplify = TRUE, n = 2)[,2]) %>%
mutate(birthdate_year = as.numeric(birthdate_year)) %>%
mutate(birthdate_year = 2000 + birthdate_year)
# create data frame with columns required for tableau viz
LeagueStats <- df %>%
select(Name = "name",
Rookie = "rookie",
JN = "jersey_number",
BD = "birthdate",
BD_Y = "birthdate_year",
Hgt = "height",
Wgt = "weight",
Pos = "position",
Team = "team_name",
GP = "games_played",
G = "goals",
A = "assists",
PTS = "points",
`Pts/G` = "points_per_game",
`+/-` = "plus_minus",
PPG = "power_play_goals",
PPA = "power_play_assists",
PPP = "power_play_points",
SHG = "short_handed_goals",
SHA = "short_handed_assists",
SHPTS = "short_handed_points",
GWG = "game_winning_goals",
ENG = "empty_net_goals",
PIM = "penalty_minutes",
Active = "active") %>%
filter(Active == 1) %>%
#filter(GP > 9) %>%
mutate(PPP = PPG + PPA) %>%
filter(Pos != "G")
#assign rookie values as YES or No instead of binary (1, 0)
LeagueStats$Rookie <- gsub('1', 'YES', LeagueStats$Rookie)
LeagueStats$Rookie <- gsub('0', 'NO', LeagueStats$Rookie)
#fix and adjust the BD column
LeagueStats$BD <- gsub(",", "", LeagueStats$BD)
LeagueStats$BD <- as.POSIXct(LeagueStats$BD, format='%B %d %Y')
LeagueStats$BD <- as.Date(LeagueStats$BD, format = "%d-%b-%Y")
View(LeagueStats)
x <- get_Teams()
library(OHLpkg)
x <- get_GoalieStats()
View(x)
x <- get_GoalieStats()
y <- get_Stats()
View(y)
library(OHLpkg)
x <- get_GoalieStats()
y <- get_Stats()
View(y)
install.packages("httr")
install.packages("readr")
library(httr)
library(readr)
url <- "https://apps.glerl.noaa.gov/coastwatch/webdata/statistic/ice/dat/g2023_2024_ice.dat"
# Fetching data from the URL
response <- GET(url)
# Checking if the request was successful
if (status_code(response) == 200) {
content_data <- content(response, "text")
# Assuming the data is tab-separated, otherwise adjust sep parameter accordingly
data <- read.table(text = content_data, sep = "\t", header = TRUE)
# If the data is comma-separated, you might use read_csv from readr
# data <- read_csv(content_data)
} else {
print(paste("Failed to retrieve data. Status code:", status_code(response)))
}
View(data)
library(httr)
library(readr)
# URL of the .dat file
url <- "https://apps.glerl.noaa.gov/coastwatch/webdata/statistic/ice/dat/g2023_2024_ice.dat"
# Fetching data from the URL
response <- GET(url)
# Checking if the request was successful
if (status_code(response) == 200) {
content_data <- content(response, "text", encoding = "UTF-8")
# Splitting the data into lines
lines <- strsplit(content_data, split = "\n")[[1]]
# Printing the first few lines to inspect the structure
if (length(lines) > 10) {  # Ensure there are enough lines to display
for (i in 1:10) {
print(lines[i])
}
} else {
print(lines)
}
} else {
print(paste("Failed to retrieve data. Status code:", status_code(response)))
}
View(response)
response[["headers"]]
x <- read.table("https://apps.glerl.noaa.gov/coastwatch/webdata/statistic/ice/dat/g2023_2024_ice.dat")
library(httr)
library(readr)
# URL of the .dat file
url <- "https://apps.glerl.noaa.gov/coastwatch/webdata/statistic/ice/dat/g2023_2024_ice.dat"
# Fetching data from the URL
response <- GET(url)
# Checking if the request was successful
if (status_code(response) == 200) {
# Get the content of the response as text
content_data <- content(response, "text", encoding = "UTF-8")
# Convert the content to a character vector, splitting by newline
lines_vector <- as.vector(strsplit(content_data, split = "\n")[[1]])
# Display the structure of the first few lines
if (length(lines_vector) > 10) {
for (i in 1:10) {
print(lines_vector[i])
}
} else {
print(lines_vector)
}
} else {
print(paste("Failed to retrieve data. Status code:", status_code(response)))
}
data <- read.table("https://apps.glerl.noaa.gov/coastwatch/webdata/statistic/ice/dat/g2023_2024_ice.dat", header = TRUE, sep = "\t")
View(data)
# Path to your .dat file
file_path <- "https://apps.glerl.noaa.gov/coastwatch/webdata/statistic/ice/dat/g2023_2024_ice.dat"
# Reading the .dat file assuming it's space-delimited and has a header
data_1<- read.table(file_path, header = TRUE, sep = "")
# Display the first few rows to check
head(data_1)
# Path to your .dat file
file_path_1 <- "https://apps.glerl.noaa.gov/coastwatch/webdata/statistic/ice/dat/g2023_2024_ice.dat"
# Reading the .dat file assuming it's space-delimited, has a header,
# and we want to fill in missing values with NA.
# Setting comment.char to an empty string in case there are non-standard comment lines.
data_2 <- read.table(file_path_1, header = TRUE, sep = "", fill = TRUE, comment.char = "")
# Check the first few rows to verify
head(data_2)
# Check the structure of the data frame
str(data_2)
library(httr)
library(readr)
# Path to your .dat file
file_path <- "https://apps.glerl.noaa.gov/coastwatch/webdata/statistic/ice/dat/g2023_2024_ice.dat"
# Assuming 'file_path' is the path to your .dat file
data <- read.table(file_path, header = FALSE, sep = "", fill = TRUE, comment.char = "", skip = 1)
View(data)
# Manually set column names
col_names <- c("YearDay", "Sup.", "Mich.", "Huron", "Erie", "Ont.", "St.Clr", "GL Total")
colnames(data) <- col_names
# Verify the changes
head(data)
View(data)
# Path to your .dat file
file_path <- "https://apps.glerl.noaa.gov/coastwatch/webdata/statistic/ice/dat/g2023_2024_ice.dat"
# Assuming 'file_path' is the path to your .dat file
data <- read.table(file_path, header = FALSE, sep = "", fill = TRUE, comment.char = "", skip = 1)
# Check the structure
head(data)
str(data)
# Manually set column names
col_names <- c("YearDay", "Sup.", "Mich.", "Huron", "Erie", "Ont.", "St.Clr", "GL Total")
# Manually set column names
col_names <- c("YearDay", "Sup.", "Mich.", "Huron", "Erie", "Ont.", "St.Clr", "GL Total")
colnames(data) <- col_names
# Verify the changes
head(data)
# Read the raw lines
lines <- readLines(file_path)
# Process each line to split the fields based on whitespace
# Here using strsplit with a regular expression for one or more spaces
data_list <- lapply(lines, function(x) unlist(strsplit(x, "\\s+")))
# Convert the list to a data frame
data <- do.call(rbind, data_list)
# Manually set the column names
colnames(data) <- col_names
# Convert character vectors to the appropriate data types
data <- as.data.frame(lapply(data, as.numeric), stringsAsFactors = FALSE)
# Check the structure
str(data)
# Manually set column names
col_names <- c("YearDay", "Sup.", "Mich.", "Huron", "Erie", "Ont.", "St.Clr", "GL Total")
colnames(data) <- col_names
# Verify the changes
head(data)
# Read the raw lines
lines <- readLines(file_path)
# Process each line to split the fields based on whitespace
# Here using strsplit with a regular expression for one or more spaces
data_list <- lapply(lines, function(x) unlist(strsplit(x, "\\s+")))
# Convert the list to a data frame
data <- do.call(rbind, data_list)
library(OHLpkg)
x <- get_RawStats()
library(OHLpkg)
x <- get_RawStats()
View(x)
u <- get_RawStats()
library(OHLpkg)
x <- get_GoalieStats()
y <- get_Stats()
u <- get_RawStats()
install.packages('NoahCornish/OHLpkg')
library(OHLpkg)
x <- get_GoalieStats()
y <- get_Stats()
u <- get_RawStats()
install.packages('NoahCornish/OHLpkg')
install.packages('NoahCornish/OHLpkg')
library(OHLpkg)
x <- get_GoalieStats()
y <- get_Stats()
u <- get_RawStats()
u <- get_RawStats(RawLeagueStats, "2023-2024 Season")
u <- get_RawStats("2023-2024 Season")
# GP > 9
get_DYStats <- function(DYStats){
library(rsconnect)
library(ggplot2)
library(tidyverse)
library(janitor)
library(lubridate)
library(RJSONIO)
library(jsonlite)
library(dplyr)
library(scales)
url_reg <- "https://lscluster.hockeytech.com/feed/?feed=modulekit&view=statviewtype&type=topscorers&key=2976319eb44abe94&fmt=json&client_code=ohl&lang=en&league_code=&season_id=76&first=0&limit=50000&sort=active&stat=all&order_direction="
# use jsonlite::fromJSON to handle NULL values
json_data <- jsonlite::fromJSON(url_reg, simplifyDataFrame = TRUE)
# create data frame
df <- json_data[["SiteKit"]][["Statviewtype"]] %>%
select(rank, player_id:num_teams) %>%
select(-c(birthtown, birthprov, birthcntry,
loose_ball_recoveries, caused_turnovers, turnovers,
phonetic_name, last_years_club, suspension_games_remaining,
suspension_indefinite)) %>%
mutate(player_id = as.numeric(player_id)) %>%
mutate(across(active:age, ~as.numeric(.))) %>%
mutate(across(rookie:jersey_number, ~as.numeric(.))) %>%
mutate(team_id = as.numeric(team_id)) %>%
mutate(across(games_played:faceoff_pct, ~as.numeric(.))) %>%
mutate(across(shots_on:num_teams, ~as.numeric(.))) %>%
mutate(birthdate_year = stringr::str_split(birthdate_year,
"\\'", simplify = TRUE, n = 2)[,2]) %>%
mutate(birthdate_year = as.numeric(birthdate_year)) %>%
mutate(birthdate_year = 2000 + birthdate_year)
# create data frame with columns required for tableau viz
LeagueStats <- df %>%
select(Name = "name",
Rookie = "rookie",
JN = "jersey_number",
BD = "birthdate",
BD_Y = "birthdate_year",
Hgt = "height",
Wgt = "weight",
Pos = "position",
Team = "team_name",
GP = "games_played",
G = "goals",
A = "assists",
PTS = "points",
`Pts/G` = "points_per_game",
`+/-` = "plus_minus",
PPG = "power_play_goals",
PPA = "power_play_assists",
PPP = "power_play_points",
SHG = "short_handed_goals",
SHA = "short_handed_assists",
SHPTS = "short_handed_points",
GWG = "game_winning_goals",
ENG = "empty_net_goals",
PIM = "penalty_minutes",
Active = "active") %>%
filter(Active == 1) %>%
filter(GP > 9) %>%
mutate(PPP = PPG + PPA) %>%
filter(Pos != "G")
#assign rookie values as YES or No instead of binary (1, 0)
LeagueStats$Rookie <- gsub('1', 'YES', LeagueStats$Rookie)
LeagueStats$Rookie <- gsub('0', 'NO', LeagueStats$Rookie)
#fix and adjust the BD column
LeagueStats$BD <- gsub(",", "", LeagueStats$BD)
LeagueStats$BD <- as.POSIXct(LeagueStats$BD, format='%B %d %Y')
LeagueStats$BD <- as.Date(LeagueStats$BD, format = "%d-%b-%Y")
DY <- LeagueStats %>%
filter(BD >= as.Date("2005-09-16") & BD <= as.Date("2006-09-15")) %>%
select(Name, Rookie, BD, Hgt, Wgt, Pos, Team,
GP, G, A, PTS, `Pts/G`, `+/-`, PPG,
PPA, PPP, GWG, ENG, PIM)
DYStats <- DY
return(DYStats)
}
file.exists("R/OHL_DraftYear_Stats.R") # Adjust path as necessary
readLines("R/OHL_DraftYear_Stats.R") # This should print the contents of your file if it can be accessed correctly.
print(getwd())
print(list.files())
